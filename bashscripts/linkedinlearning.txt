1/ Using codespaces. Gives us a Linux system to test bash.


2/ Using a mark M + Letter, to go back to a mark, ' + letter



Basics of Bash


Piping and redirection


PIPING: taking the output of one program and pipe it as the input of another
program.
STDOUT is sent to STDIN 

cat doesnt paginate , less does you can pipe cat into less
cat some.txt |  less

REDIRECTION

Take a stream and send it to or from files. 

Redirection works with the
standard input  STDIN  0 (keyboard or other input)
standard output STDOUT 1 (regular output)
standared error STDERR 2 (output marked as 'error')

ls > somefile.txt  - overwrite what was in somefile.txt
ls >> somefile.txt  - append to the end of somefile.txt

ls 2> somefile.txt  -  take the error and overwrite somefile.txt

You can add the number 1 to standard redirection just like with 2 for errors but
it is not needed.

To take input from a file we reverse the symbol, to make it 'less than' <

A double 'less than' << is a 'Here document' we use a limit string to limit what
is passed  in as input.


Bash can use system commands(programs) but it also has its own 'builtins'
These builtins are commands that are included in bash itself , sometimes
builtins are the same or have the same name as system programs.
'echo' and 'printf' are two examples.
echo ends its output with a newline /n

We can differentiate between builtins and system commands with prefixing with
'builtin' or 'command'
we can also see if a command is a builtin or system command(program) by running:
> command -V <name of the command>
Bash will always run the builtin version by default.
command version of a command are located in /usr/bin/
To run the command version instead of the builtin we run 'enable -n <command>'
To switch back to the builtin 'enable <command>'

commands have 'man' pages. builtins have help pages.


EXPANSION

the characters:
{}
()
[]   
~   home directory
~- the previous directory
allow expansions of variables and expressions 
{} brace expansion:
we can pass in a list of items separated by commas, or a range of letters or
numbers, separated by two dots:

{file1,file2,file3}  
{x..y..z} {1..5}
{1..100..5} the third number is the step number
brace expansion can be used for passing multiple parameters for commands


PARAMETER EXPANSION

${..} <--- Can be used with or without braces.

you can add numbers to substring a variable

${var:3:4}

we can also perform substitution using expression.

COMMAND SUBSITUTION

$(..) <-- Run a sub-process and return the outputted value.


$((..)) expand an arithmatic expression. bear in mind that bash can only deal
with integers.


ECHO

single-quotes/strong-quotes :print everything , no escaping or expansion.

double-quotes: allows expansion

no-quotes: expansion brackets need escaping.

flags:
-n : dont uses new line.(like printf)

-e : allows us to escape special characters, include \033[<code>;<code>m <text>
\033
]

VARIABLES:

Varibales are a special case of parameter expansion.
Variables are case-sensitive. Tend to create user variables lowercase to
distinguish between env variables.

To assign variable  <varname>=<value> , can also wrap value in double quotes
which allows string with spaces"

Variable can be reassigned, but we can make them read-only

'declare -r <varname>=<value>' <-- readonly variable

the declare command allows to modify variables with a flags
'help declare' <--- find out which flags you can pass 

'declare -p' <--- see just what variables have been set.

NUMBERS

((...))  <--- arithmetic expansion , returns the result of mathematicl operation
((...))  <--- arithmetic evaluation , assigns value to variable

a=3
((a+=3)) <--- increment a , no dolar sign needed
((a-=3)) <--- decrement a , no dolar sign needed

To do floating point number we use the program 'bc' or 'awk'

dolar sign is not used , because we dont need to expand the variable , we want
to assign to the variable itself

Bash numbers are integers and are converted to string during expansion

use 'declare -i b=3' <-- to make the variable explicityly an integer.

RANDOM 
generates a random number $RANDOM between 0 and  32767 <-- max value of 16 bit
signed integer.You can reduce the range by modulo 100


TEST

test <test>

returns true or false through EXIT status, can be expressed as [ expression ]

help test <-- will show the flags available for test


[[ .. ]] <-- extended test allows more than one expression, using logical
operators && , || (like
js)

Logical operators can be used to combine expression with teh second depending
the boolean of the first.

You can also test regex [[ "cat" =~ c.* ]] 


PRINTF

Like echo but we can use placeholders. %d  <--- a digit value
%s <--- a string value



after the end of the line we provide the values/exprssions to be substituted.



ARRAYS

Bash supports two types of arrays: indexed and associatie array.

declare -a snacks=("banaana" "apple" "orange")
$snacks[0]

$snacks[@] at sign shows entire array

associative arrays:

declare -a <arrname>

<arrayname>[<name>]


to echo an array we use the parameter expansion ${...}
 
 We can access using the [number] index accessor, and set elements in the array
 by the same way.


To add on the end of the array:  <arrname>+=( <value> ) <-- must be in
paraentheses.

TO show whole array we use <arrname>[@] <-- @ symbol shows all the elements

ASSOCIATIVE ARRAYS

declare -A <assocName>
<assocName>["key"]="value"

Access the value:   <assocName>["key"]
Remember to to apply parameter expansion to it if you intend to echo.

BOTH ARRAYS ARE LIMITED TO ONE LEVEL.

https://deno.com/blog/the-future-and-past-is-server-side-rendering


CONTROL STRUCTURES

if ...
then
	...
fi

if <condition> ; then  <--- also valid


LOOPS

2 loops 
WHILE , UNTIL

both take a condition, WHILE runs while  it condition is true, UNTIL while its
condition false 

Both take DO keyword  DO statement DONE

FOR loop loops through a list of values 

for i in <list> <---- this can be anything that expands to a list
do 
<action>
done


you can use an array...

declare -a myarr=("a" "b" "c" "d")  

for i in "${arr[@]}" ....

associative array...

for i in "${!arr[@]}" ....



FUNCTIONS

define a function by providing it with a name followed by parantheses followed
by braces. You can use a function keyword - in which case you don't need the
parantheses. 
You need to define a function before you use it.

eg.
fname() { ... } / function fname { ... }

 To call a function we simply use the name:

 fname 

 to provide arguments to it we follow with the arguments

 fname arg1 arg2 

 We can access arguments from within the function the same way we would through
 the script itself eg $1 <--- first argument  $2<--second argument  $@ <--slist of
 all arguments 

You can run $FUNCNAME to refer to the funcname..

Variable defined in functions will be available outside that function.
UNLESS we proceed it with the 'local' keyword in which case it is scoped to the
function.



